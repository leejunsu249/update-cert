---
###################################################################
# master
###################################################################
- name: remove pki files
  shell: >
    rm -rf /etc/kubernetes/pki/*

- name: remove conf files
  shell: >
    rm -rf /etc/kubernetes/*.conf

- name: remove kubelet pki files
  shell: >
    rm -rf {{ kubelet_root_dir }}/pki/*

- name: kubeadm init certs
  shell: >
    kubeadm init phase certs all --config={{ kube_addon_dir }}/kubeadm-config.yaml

- name: remove pki files
  shell: >
    rm -rf /etc/kubernetes/pki/*

##########################################################################
# Copy Cert config file
##########################################################################
- name: Create config directory
  file: path=/etc/kubernetes/pki/conf state=directory owner={{ ansible_user }} group={{ ansible_group }}
  register: pki_dir
  ignore_errors: yes

- name: Create pki etcd directory
  file: path=/etc/kubernetes/pki/etcd state=directory owner={{ ansible_user }} group={{ ansible_group }}
  register: pki_etcd_dir
  ignore_errors: yes

- name: Copy Config file
  template:
    src: "{{ item }}"
    dest: "/etc/kubernetes/pki/conf/{{ item }}"
  with_items:
    - ca.conf
    - etcd-ca.conf
    - user-admin.conf 
    - user-controller-manager.conf
    - user-kubelet.conf
    - user-scheduler.conf
    - apiserver.conf
    - apiserver-etcd-client.conf
    - apiserver-kubelet-client.conf
    - front-proxy-ca.conf
    - front-proxy-client.conf
    - healthcheck-client.conf
    - peer.conf
    - server.conf

##########################################################################
# Create Certs
##########################################################################
# ca
- name: Create ca.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/ca.key 2048

- name: Create ca.crt
  shell: >
    openssl req -x509 -new -nodes -key /etc/kubernetes/pki/ca.key -days {{ certificates_duration }} -out /etc/kubernetes/pki/ca.crt -extensions v3_ext -config /etc/kubernetes/pki/conf/ca.conf

# sa
- name: Create sa.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/sa.key 2048

- name: Create sa.pub
  shell: >
    openssl rsa -in /etc/kubernetes/pki/sa.key -pubout -out /etc/kubernetes/pki/sa.pub

# user
- name: Create user-admin.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/conf/user-admin.key 2048

- name: Create user-admin.csr
  shell: >
    openssl req -new -key /etc/kubernetes/pki/conf/user-admin.key -out /etc/kubernetes/pki/conf/user-admin.csr -config /etc/kubernetes/pki/conf/user-admin.conf

- name: Create user-admin.crt
  shell: >
    openssl x509 -req -in /etc/kubernetes/pki/conf/user-admin.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out /etc/kubernetes/pki/conf/user-admin.crt -days {{ certificates_duration }} -extensions v3_ext -extfile /etc/kubernetes/pki/conf/user-admin.conf

- name: Create user-controller-manager.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/conf/user-controller-manager.key 2048

- name: Create user-controller-manager.csr
  shell: >
    openssl req -new -key /etc/kubernetes/pki/conf/user-controller-manager.key -out /etc/kubernetes/pki/conf/user-controller-manager.csr -config /etc/kubernetes/pki/conf/user-controller-manager.conf

- name: Create user-controller-manager.crt
  shell: >
    openssl x509 -req -in /etc/kubernetes/pki/conf/user-controller-manager.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out /etc/kubernetes/pki/conf/user-controller-manager.crt -days {{ certificates_duration }} -extensions v3_ext -extfile /etc/kubernetes/pki/conf/user-controller-manager.conf

- name: Create user-kubelet.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/conf/user-kubelet.key 2048

- name: Create user-kubelet.csr
  shell: >
    openssl req -new -key /etc/kubernetes/pki/conf/user-kubelet.key -out /etc/kubernetes/pki/conf/user-kubelet.csr -config /etc/kubernetes/pki/conf/user-kubelet.conf

- name: Create user-kubelet.crt
  shell: >
    openssl x509 -req -in /etc/kubernetes/pki/conf/user-kubelet.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out /etc/kubernetes/pki/conf/user-kubelet.crt -days {{ certificates_duration }} -extensions v3_ext -extfile /etc/kubernetes/pki/conf/user-kubelet.conf

- name: Create user-scheduler.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/conf/user-scheduler.key 2048

- name: Create user-scheduler.csr
  shell: >
    openssl req -new -key /etc/kubernetes/pki/conf/user-scheduler.key -out /etc/kubernetes/pki/conf/user-scheduler.csr -config /etc/kubernetes/pki/conf/user-scheduler.conf

- name: Create user-scheduler.crt
  shell: >
    openssl x509 -req -in /etc/kubernetes/pki/conf/user-scheduler.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out /etc/kubernetes/pki/conf/user-scheduler.crt -days {{ certificates_duration }} -extensions v3_ext -extfile /etc/kubernetes/pki/conf/user-scheduler.conf

# etcd-ca
- name: Create etcd/ca.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/etcd/ca.key 2048

- name: Create etcd/ca.crt
  shell: >
    openssl req -x509 -new -nodes -key /etc/kubernetes/pki/etcd/ca.key -days {{ certificates_duration }} -out /etc/kubernetes/pki/etcd/ca.crt -extensions v3_ext -config /etc/kubernetes/pki/conf/etcd-ca.conf

# apiserver
- name: Create apiserver.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/apiserver.key 2048

- name: Create apiserver.csr
  shell: >
    openssl req -new -key /etc/kubernetes/pki/apiserver.key -out /etc/kubernetes/pki/conf/apiserver.csr -config /etc/kubernetes/pki/conf/apiserver.conf

- name: Create apiserver.crt
  shell: >
    openssl x509 -req -in /etc/kubernetes/pki/conf/apiserver.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out /etc/kubernetes/pki/apiserver.crt -days {{ certificates_duration }} -extensions v3_ext -extfile /etc/kubernetes/pki/conf/apiserver.conf

# apiserver-etcd-client
- name: Create apiserver-etcd-client.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/apiserver-etcd-client.key 2048

- name: Create apiserver-etcd-client.csr
  shell: >
    openssl req -new -key /etc/kubernetes/pki/apiserver-etcd-client.key -out /etc/kubernetes/pki/conf/apiserver-etcd-client.csr -config /etc/kubernetes/pki/conf/apiserver-etcd-client.conf

- name: Create apiserver-etcd-client.crt
  shell: > 
    openssl x509 -req -in /etc/kubernetes/pki/conf/apiserver-etcd-client.csr -CA /etc/kubernetes/pki/etcd/ca.crt -CAkey /etc/kubernetes/pki/etcd/ca.key -CAcreateserial -out /etc/kubernetes/pki/apiserver-etcd-client.crt -days {{ certificates_duration }} -extensions v3_ext -extfile /etc/kubernetes/pki/conf/apiserver-etcd-client.conf

# apiserver-kubelet-client
- name: Create apiserver-kubelet-client.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/apiserver-kubelet-client.key 2048

- name: Create apiserver-kubelet-client.csr
  shell: >
    openssl req -new -key /etc/kubernetes/pki/apiserver-kubelet-client.key -out /etc/kubernetes/pki/conf/apiserver-kubelet-client.csr -config /etc/kubernetes/pki/conf/apiserver-kubelet-client.conf

- name: Create apiserver-kubelet-client.crt
  shell: >
    openssl x509 -req -in /etc/kubernetes/pki/conf/apiserver-kubelet-client.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out /etc/kubernetes/pki/apiserver-kubelet-client.crt -days {{ certificates_duration }} -extensions v3_ext -extfile /etc/kubernetes/pki/conf/apiserver-etcd-client.conf

# front-proxy-ca
- name: Create front-proxy-ca.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/front-proxy-ca.key 2048

- name: Create front-proxy-ca.crt
  shell: >
    openssl req -x509 -new -nodes -key /etc/kubernetes/pki/front-proxy-ca.key -days {{ certificates_duration }} -out /etc/kubernetes/pki/front-proxy-ca.crt -extensions v3_ext -config /etc/kubernetes/pki/conf/front-proxy-ca.conf

# front-proxy-client
- name: Create front-proxy-client.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/front-proxy-client.key 2048

- name: Create front-proxy-client.csr
  shell: >
    openssl req -new -key /etc/kubernetes/pki/front-proxy-client.key -out /etc/kubernetes/pki/conf/front-proxy-client.csr -config /etc/kubernetes/pki/conf/front-proxy-client.conf

- name: Create front-proxy-client.crt
  shell: >
    openssl x509 -req -in /etc/kubernetes/pki/conf/front-proxy-client.csr -CA /etc/kubernetes/pki/front-proxy-ca.crt -CAkey /etc/kubernetes/pki/front-proxy-ca.key -CAcreateserial -out /etc/kubernetes/pki/front-proxy-client.crt -days {{ certificates_duration }} -extensions v3_ext -extfile /etc/kubernetes/pki/conf/front-proxy-client.conf

# etcd/healthcheck-client
- name: Create etcd/healthcheck-client.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/etcd/healthcheck-client.key 2048

- name: Create etcd/healthcheck-client.csr
  shell: >
    openssl req -new -key /etc/kubernetes/pki/etcd/healthcheck-client.key -out /etc/kubernetes/pki/conf/healthcheck-client.csr -config /etc/kubernetes/pki/conf/healthcheck-client.conf

- name: Create etcd/healthcheck-client.crt
  shell: > 
    openssl x509 -req -in /etc/kubernetes/pki/conf/healthcheck-client.csr -CA /etc/kubernetes/pki/etcd/ca.crt -CAkey /etc/kubernetes/pki/etcd/ca.key -CAcreateserial -out /etc/kubernetes/pki/etcd/healthcheck-client.crt -days {{ certificates_duration }} -extensions v3_ext -extfile /etc/kubernetes/pki/conf/front-proxy-client.conf 

# etcd/peer
- name: Create etcd/peer.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/etcd/peer.key 2048

- name: Create etcd/peer.csr
  shell: > 
    openssl req -new -key /etc/kubernetes/pki/etcd/peer.key -out /etc/kubernetes/pki/conf/peer.csr -config /etc/kubernetes/pki/conf/peer.conf

- name: Create etcd/peer.crt
  shell: >
    openssl x509 -req -in /etc/kubernetes/pki/conf/peer.csr -CA /etc/kubernetes/pki/etcd/ca.crt -CAkey /etc/kubernetes/pki/etcd/ca.key -CAcreateserial -out /etc/kubernetes/pki/etcd/peer.crt -days {{ certificates_duration }} -extensions v3_ext -extfile /etc/kubernetes/pki/conf/peer.conf

# etcd/server
- name: Create etcd/server.key
  shell: >
    openssl genrsa -out /etc/kubernetes/pki/etcd/server.key 2048

- name: Create etcd/server.csr
  shell: >
    openssl req -new -key /etc/kubernetes/pki/etcd/server.key -out /etc/kubernetes/pki/conf/server.csr -config /etc/kubernetes/pki/conf/server.conf

- name: Create etcd/server.crt
  shell: >
    openssl x509 -req -in /etc/kubernetes/pki/conf/server.csr -CA /etc/kubernetes/pki/etcd/ca.crt -CAkey /etc/kubernetes/pki/etcd/ca.key -CAcreateserial -out /etc/kubernetes/pki/etcd/server.crt -days {{ certificates_duration }} -extensions v3_ext -extfile /etc/kubernetes/pki/conf/server.conf 

##########################################################################
# Create kubeconfig
##########################################################################\
# Base64 ca.crt
- name: Get ca.crt
  shell: >
    cat /etc/kubernetes/pki/ca.crt
  register: ca_crt

- name: Base64 ca.crt
  shell: >
    echo {{ ca_crt.stdout | b64encode }}
  register: base64_ca_crt

- name: set var fact
  set_fact:
    base_ca_crt: "{{ base64_ca_crt }}"

# Base64 user-admin.crt
- name: Get user-admin.crt
  shell: >
    cat /etc/kubernetes/pki/conf/user-admin.crt
  register: user_admin_crt

- name: Base64 user-admin.crt
  shell: >
    echo {{ user_admin_crt.stdout | b64encode }}
  register: base64_user_admin_crt

- name: set var fact
  set_fact:
    base_admin_crt: "{{ base64_user_admin_crt }}"

# Base64 user-admin.key
- name: Get user-admin.key
  shell: >
    cat /etc/kubernetes/pki/conf/user-admin.key
  register: user_admin_key

- name: Base64 user-admin.key
  shell: >
    echo {{ user_admin_key.stdout | b64encode }}
  register: base64_user_admin_key

- name: set var fact
  set_fact:
    base_admin_key: "{{ base64_user_admin_key }}"

# Base64 user-controller-manager.crt
- name: Get user-controller-manager.crt
  shell: >
    cat /etc/kubernetes/pki/conf/user-controller-manager.crt
  register: user_controller_manager_crt

- name: Base64 user-controller-manager.crt
  shell: >
    echo {{ user_controller_manager_crt.stdout | b64encode }}
  register: base64_user_controller_manager_crt

- name: set var fact
  set_fact:
    base_controller_manager_crt: "{{ base64_user_controller_manager_crt }}"

# Base64 user-controller-manager.key
- name: Get user-controller-manager.key
  shell: >
    cat /etc/kubernetes/pki/conf/user-controller-manager.key
  register: user_controller_manager_key

- name: Base64 user-controller-manager.key
  shell: >
    echo {{ user_controller_manager_key.stdout | b64encode }}
  register: base64_user_controller_manager_key

- name: set var fact
  set_fact:
    base_controller_manager_key: "{{ base64_user_controller_manager_key }}"

# Base64 user-kubelet.crt
- name: Get user-kubelet.crt
  shell: >
    cat /etc/kubernetes/pki/conf/user-kubelet.crt
  register: user_kubelet_crt

- name: Base64 user-kubelet.crt
  shell: >
    echo {{ user_kubelet_crt.stdout | b64encode }}
  register: base64_user_kubelet_crt

- name: set var fact
  set_fact:
    base_kubelet_crt: "{{ base64_user_kubelet_crt }}"

# Base64 user-kubelet.key
- name: Get user-kubelet.key
  shell: >
    cat /etc/kubernetes/pki/conf/user-kubelet.key
  register: user_kubelet_key

- name: Base64 user-kubelet.key
  shell: >
    echo {{ user_kubelet_key.stdout | b64encode }}
  register: base64_user_kubelet_key

- name: set var fact
  set_fact:
    base_kubelet_key: "{{ base64_user_kubelet_key }}"

# Base64 user-scheduler.crt
- name: Get user-scheduler.crt
  shell: >
    cat /etc/kubernetes/pki/conf/user-scheduler.crt
  register: user_scheduler_crt

- name: Base64 user-scheduler.crt
  shell: >
    echo {{ user_scheduler_crt.stdout | b64encode }}
  register: base64_user_scheduler_crt

- name: set var fact
  set_fact:
    base_scheduler_crt: "{{ base64_user_scheduler_crt }}"

# Base64 user-scheduler.key
- name: Get user-scheduler.key
  shell: >
    cat /etc/kubernetes/pki/conf/user-scheduler.key
  register: user_scheduler_key

- name: Base64 user-scheduler.key
  shell: >
    echo {{ user_scheduler_key.stdout | b64encode }}
  register: base64_user_scheduler_key

- name: set var fact
  set_fact:
    base_scheduler_key: "{{ base64_user_scheduler_key }}"

- name: remove conf files
  shell: >
    rm -rf /etc/kubernetes/*.conf

# Copy Template kubeconfig
- name: Copy admin.conf
  template:
    src: admin.conf
    dest: /etc/kubernetes/admin.conf

- name: Copy controller-manager.conf
  template:
    src: controller-manager.conf
    dest: /etc/kubernetes/controller-manager.conf

- name: Copy kubelet.conf
  template:
    src: kubelet.conf
    dest: /etc/kubernetes/kubelet.conf

- name: Copy scheduler.conf
  template:
    src: scheduler.conf
    dest: /etc/kubernetes/scheduler.conf


- name: Reload changing kubelet
  command: systemctl daemon-reload

- name: Start and enable services
  service:
    name: "{{ item }}"
    state: restarted
    enabled: yes
  with_items:
    - kubelet
    - containerd
  when:
    - container_option == "containerd"

- name: Start and enable services
  service:
    name: "{{ item }}"
    state: restarted
    enabled: yes
  with_items:
    - kubelet
    - crio
  when:
    - container_option == "cri-o"

- name: restart static pods
  shell: "{{ item }}"
  with_items:
    - kill -s SIGHUP $(pidof kube-apiserver)
    - kill -s SIGHUP $(pidof kube-controller-manager)
    - kill -s SIGHUP $(pidof kube-scheduler)
    - kill -s SIGHUP $(pidof etcd)
  ignore_errors: yes

- name: wait for kube_apiserver
  wait_for:
    host: 127.0.0.1
    port: "{{ kube_apiserver_port }}"
    delay: 20

- name: Replace kubeconfig
  shell: >
    yes | cp -rf /etc/kubernetes/admin.conf /root/.kube/config

- name: Get before token id
  shell: "echo `kubeadm token list | tail -n1 | awk '{print $1}'`"
  register: before_token

- name: print output of before_token
  debug: msg="{{ before_token.stdout }}"

- name: Delete token id
  shell: >
    kubeadm token delete {{ before_token.stdout }}
  ignore_errors: yes

- name: Create new token    
  shell: >
    kubeadm init phase bootstrap-token --config {{ kube_addon_dir }}/kubeadm-config.yaml

- name: Get the token id from the master initialization
  shell: "echo `kubeadm token list | tail -n1 | awk '{print $1}'`"
  register: new_token

- name: set var fact token
  set_fact:
    token: "{{ new_token }}"

- name: print output of new_token
  debug: msg="{{ token.stdout }}"

- name: Get the IP and port from the master initialization
  shell: "echo '{{ master_ip }}:{{ kube_apiserver_port }}'"
  register: kubeadm_master_ip_port

- name: set var fact
  set_fact:
    ip_port: "{{ kubeadm_master_ip_port }}"
  when: kubeadm_master_ip_port.changed

- name: print output of kubeadm_master_ip_port
  debug: msg="{{ ip_port.stdout_lines }}"

- name: Get notready node name
  shell: >
    kubectl get nodes | awk '{print $1}' | tail -n1
  register: node_name

- name: node wait_for(30s)
  wait_for: timeout=30

- name: Restart kubelet
  shell: >
    systemctl restart kubelet

- name: notready node wait_for
  shell: >
    kubectl wait --for=condition=ready node/{{ node_name.stdout }}
  register: result
  until: result.rc == 1
  retries: 100
  delay: 5
  ignore_errors: yes